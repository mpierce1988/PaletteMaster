@page "/Palettes/{id}"
@using PaletteMaster.Services.Palettes
@using PaletteMaster.Models.DTO.Palettes
@using PaletteMaster.Models.Domain

<h3>Edit Palette</h3>
<br />

@if (_errorMessage is not null)
{
    <article>
        <header class="pico-background-red-500">An Error Has Occurred</header>
        <p>@_errorMessage</p>
    </article>
}

@if (_response is not null)
{
    <article>
        <header class="pico-background-green-500">Palette Successfully Updated</header>
        <p>Palette '@(_response.Name)' with ID @(_response.PaletteId) and @(_response.Colors.Count) colors</p>
    </article>
}

<EditForm Model="@_request" OnValidSubmit="UpdatePalette">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="row">
        <div class="col-xs-12">
            <label for="RequestName"><p>Name</p></label>
            <InputText DisplayName="Name" @bind-Value="@_request.Name" Id="RequestName"/>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <label for="RequestColors"><p>Colors</p></label>
        </div>
        <div class="col-xs-12 col-lg-6">
            <label>Select a Color</label>
            <fieldset role="group">
                <input type="color" @oninput="ReceiveColorInput"/>
                <button @onclick="AddColor" disabled="@(_selectedColor is null)" type="button" class="contrast">Add</button>
            </fieldset>
        </div>
    </div>
    @if (_request.Colors.Count > 0)
    {
        <div class="row">
            @foreach (var color in _request.Colors)
            {
                <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                    <!--
                    <p>@color.Hexadecimal</p>
                    <div style="width: 75px; height: 75px; background-color: @(color.Hexadecimal)"></div>
                    <button @onclick="() => RemoveColor(color)" type="button">Remove</button>
                    -->
                    <ColorWidget SelectedColor="@color" OnRemove="@RemoveColor" Width="75" Height="75"/>
                </div>
            }
        </div>
    }
    <div class="row">
        <div class="col-xs-3">
            <button type="submit">Update</button>
        </div>
        <div class="col-xs-3">
            <button type="button" @onclick="Reset" class="outline secondary">Reset</button>
        </div>
    </div>
    
</EditForm>

@code {
    [Inject] private IPaletteService PaletteService { get; set; } = default!;
    
    [Parameter] public string id { get; set; }

    private int _paletteId => Convert.ToInt32(id);
    
    private UpdatePaletteRequest _request = new UpdatePaletteRequest();
    private UpdatePaletteResponse? _response = null;
    private string? _errorMessage = null;
    private bool _isLoading;
    private Color? _selectedColor;

    protected override async Task OnParametersSetAsync()
    {
        await GetPalette();

        await base.OnParametersSetAsync();
    }

    private async Task GetPalette()
    {
        GetPaletteRequest request = new()
        {
            PalleteId = _paletteId
        };
        
        Result<GetPaletteResponse, HandledException> result = await PaletteService.GetPaletteAsync(request);

        result.Match(
            success: response =>
            {
                _request = new()
                {
                    PaletteId = response.PaletteId,
                    Name = response.Name,
                    Colors = response.Colors
                };
                    
                return true;
            } ,
            failure: error =>
            {
                _errorMessage = error.Message;
                    
                return false;
            }
        );
    }

    private async Task UpdatePalette()
    {
        _isLoading = true;
        _errorMessage = null;
        _response = null;
        
        Result<UpdatePaletteResponse, HandledException> result = await PaletteService.UpdatePaletteAsync(_request);

        result.Match(
            response =>
            {
                _response = response;
                return true;
            },
            error =>
            {
                _errorMessage = error.Message;
                return false;
            }
            );

        _isLoading = false;
    }

    private void ReceiveColorInput(ChangeEventArgs obj)
    {
        if (obj.Value is null) return;
        
        _selectedColor = new Color(obj.Value.ToString()!);
    }

    private void AddColor()
    {
        if (_selectedColor is null) return;

        if (_request.Colors.Contains(_selectedColor))
        {
            _errorMessage = "Color already added";
            
        }
        else
        {
            _request.Colors.Add(_selectedColor);
            _errorMessage = null;
        }
        
        _selectedColor = null;
    }

    private void RemoveColor(Color color)
    {
        if (_request.Colors.Contains(color))
        {
            _request.Colors.Remove(color);
        }
    }

    private async Task Reset()
    {
        _errorMessage = null;
        _response = null;
        _isLoading = true;
        await GetPalette();
        _isLoading = false;
    }

}
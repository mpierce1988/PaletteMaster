@page "/Palettes/{id}"
@using PaletteMaster.Services.Palettes
@using PaletteMaster.Models.DTO.Palettes
@using PaletteMaster.Models.Domain
@using PaletteMaster.Models.DTO
@using PaletteMaster.Models.DTO.ImageProcessing
@using PaletteMaster.Presentation.Services
@using PaletteMaster.Services.ImageProcessing

<h3>Edit Palette</h3>
<br />

@if (_errorMessage is not null)
{
    <article>
        <header class="pico-background-red-500">An Error Has Occurred</header>
        <p>@_errorMessage</p>
    </article>
}

@if (_response is not null)
{
    <article>
        <header class="pico-background-green-500">Palette Successfully Updated</header>
        <p>Palette '@(_response.Name)' with ID @(_response.PaletteId) and @(_response.Colors.Count) colors</p>
    </article>
}

<EditForm Model="@_request" OnValidSubmit="UpdatePalette">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="row">
        <div class="col-xs-12">
            <label for="RequestName"><p>Name</p></label>
            <InputText DisplayName="Name" @bind-Value="@_request.Name" Id="RequestName"/>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <label for="RequestColors"><p>Colors</p></label>
        </div>
        <div class="col-xs-12 col-lg-6">
            <label>Select a Color</label>
            <fieldset role="group">
                <input type="color" @oninput="ReceiveColorInput"/>
                <button @onclick="AddColor" disabled="@(_selectedColor is null)" type="button" class="contrast">Add</button>
            </fieldset>
        </div>
    </div>
    @if (_request.Colors.Count > 0)
    {
        <div class="row">
            @foreach (var color in _request.Colors)
            {
                <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                    <!--
                    <p>@color.Hexadecimal</p>
                    <div style="width: 75px; height: 75px; background-color: @(color.Hexadecimal)"></div>
                    <button @onclick="() => RemoveColor(color)" type="button">Remove</button>
                    -->
                    <ColorWidget SelectedColor="@color" OnRemove="@RemoveColor" Width="75" Height="75"/>
                </div>
            }
        </div>
    }
    <div class="row">
        <div class="col-xs-3">
            <button type="submit">Update</button>
        </div>
        <div class="col-xs-3">
            <button type="button" @onclick="Reset" class="outline secondary">Reset</button>
        </div>
    </div>
    
</EditForm>

<br />

<div class="row center-xs">
    <div class="col-xs-12 col-sm-8 col-md-6 col-lg-4">
        <article>
            <header>Select Preview Image</header>
            @if(_previewImageSrc is not null)
            {
                <img src="@_previewImageSrc" alt="Preview Image" />
                @if (_imageProcessingTime is not null)
                {
                    <p>Processing Time: @_imageProcessingTime.Value.TotalSeconds</p>
                }
            }
            else if (_isLoadingPreviewImage)
            {
                <article aria-busy="true"></article>
            }
            else if (_imagePreviewError is not null)
            {
                <p class="pico-background-red-250">Error: @_imagePreviewError</p>
            }
            else
            {
                <p>Upload an image to preview</p>
            }
            <footer>
                <button type="button" class="secondary" @onclick="ClearPreviewImage" disabled="@(_previewImageSrc = null)">Clear Image</button>
                <button type="button" @onclick="UploadPreviewImage">Upload Image</button>
                @if (_previewImage is not null)
                {
                    <button type="button" class="contrast" @onclick="SavePreviewImage">Save Image</button>
                }
            </footer>
        </article>
    </div>
</div>

@code {
    [Inject] private IPaletteService PaletteService { get; set; } = default!;
    [Inject] private IFilePickerService FilePickerService { get; set; } = default!;
    [Inject] private IImageProcessingService ImageProcessingService { get; set; } = default!;
    
    [Parameter] public string id { get; set; }

    private int _paletteId => Convert.ToInt32(id);
    
    private UpdatePaletteRequest _request = new UpdatePaletteRequest();
    private UpdatePaletteResponse? _response = null;
    private string? _errorMessage = null;
    private bool _isLoading;
    private Color? _selectedColor;

    private Stream? _receuvedImage;
    private string? _fileName;
    private MemoryStream? _previewImage;
    private string? _previewImageSrc;
    private string? _imagePreviewError;
    private bool _isLoadingPreviewImage;
    private TimeSpan? _imageProcessingTime;

    protected override async Task OnParametersSetAsync()
    {
        await GetPalette();

        await base.OnParametersSetAsync();
    }

    private async Task GetPalette()
    {
        GetPaletteRequest request = new()
        {
            PalleteId = _paletteId
        };
        
        Result<GetPaletteResponse, HandledException> result = await PaletteService.GetPaletteAsync(request);

        result.Match(
            success: response =>
            {
                _request = new()
                {
                    PaletteId = response.PaletteId,
                    Name = response.Name,
                    Colors = response.Colors
                };
                    
                return true;
            } ,
            failure: error =>
            {
                _errorMessage = error.Message;
                    
                return false;
            }
        );
    }

    private async Task UpdatePalette()
    {
        _isLoading = true;
        _errorMessage = null;
        _response = null;
        
        Result<UpdatePaletteResponse, HandledException> result = await PaletteService.UpdatePaletteAsync(_request);

        result.Match(
            response =>
            {
                _response = response;
                return true;
            },
            error =>
            {
                _errorMessage = error.Message;
                return false;
            }
            );

        _isLoading = false;
    }

    private void ReceiveColorInput(ChangeEventArgs obj)
    {
        if (obj.Value is null) return;
        
        _selectedColor = new Color(obj.Value.ToString()!);
    }

    private void AddColor()
    {
        if (_selectedColor is null) return;

        if (_request.Colors.Contains(_selectedColor))
        {
            _errorMessage = "Color already added";
            
        }
        else
        {
            _request.Colors.Add(_selectedColor);
            _errorMessage = null;
        }
        
        _selectedColor = null;
    }

    private void RemoveColor(Color color)
    {
        if (_request.Colors.Contains(color))
        {
            _request.Colors.Remove(color);
        }
    }

    private async Task Reset()
    {
        _errorMessage = null;
        _response = null;
        _isLoading = true;
        await GetPalette();
        _isLoading = false;
    }

    private void ClearPreviewImage()
    {
        _previewImage = null;
        _previewImageSrc = null;
    }

    private async Task UploadPreviewImage()
    {
        _isLoadingPreviewImage = true;
        _imagePreviewError = null;
        _receuvedImage = null;
        _fileName = null;
        
        (_receuvedImage, _fileName) = await FilePickerService.PickFileAndNameAsync();

        if (_receuvedImage is null || string.IsNullOrWhiteSpace(_fileName))
        {
            _imagePreviewError = "No image selected";
        };

        await ProcessImage();

        _isLoadingPreviewImage = false;

    }

    private async Task ProcessImage()
    {
        if (_receuvedImage is null)
        {
            _imagePreviewError = "No image selected";
            return;
        }

        if (_fileName is null)
        {
            _imagePreviewError = "No file name";
            return;
        }

        _imageProcessingTime = null;

        DateTime start = DateTime.Now;
        
        ProcessImageRequest request = new()
        {
            FileName = _fileName,
            FileStream = _receuvedImage,
            Colors = _request.Colors
        };
        
        Result<ProcessImageResponse,HandledException> result = await ImageProcessingService.ProcessImageAsync(request);
        
        DateTime end = DateTime.Now;
        
        _imageProcessingTime = end - start;

        result.Match<object?>(
            success: response =>
            {
                MemoryStream imageMemoryStream = (MemoryStream)response.Stream;
                imageMemoryStream.Position = 0;
                _previewImage = imageMemoryStream;
                _previewImageSrc = $"data:image/png;base64,{Convert.ToBase64String(_previewImage.ToArray())}";
                return null;
            },
            failure: error =>
            {
                _imagePreviewError = error.Message;
                return null;
            }
        );
    }

    private async Task SavePreviewImage()
    {
        if (_previewImage is null || _fileName is null)
        {
            _imagePreviewError = "No image or filename to save";
            return;
        }

        _imagePreviewError = null;

        SaveFileRequest request = new()
        {
            FileName = _fileName,
            FileStream = _previewImage
        };
        
        Result<SaveFileResponse,HandledException> result = await FilePickerService.SaveFileAsync(request);

        result.Match<object?>(
            success: response => null,
            failure: error =>
            {
                _imagePreviewError = error.Message;
                return null;
            }
        );
    }

}
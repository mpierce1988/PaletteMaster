@page "/palettes"
@using PaletteMaster.Services.Palettes
@using PaletteMaster.Models.DTO.Palettes
@using PaletteMaster.Models.Domain

<h2>Palette Management</h2>
<br />

<button @onclick="GoToPaletteCreate">Create Palette</button>
<br />
<hr />
<br />
<!--
<h4>Search Palettes</h4>
<br />
-->
<details>
    <summary>Search</summary>

    <EditForm Model="@_request" OnValidSubmit="SearchPalettes">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="row">
            <div class="col-xs-12 col-lg-6">
                <label for="RequestName"><p>Name</p></label>
                <InputText DisplayName="Name" @bind-Value="@_request.Name" Id="RequestName"/>
            </div>
            <div class="col-xs-12 col-lg-6">
                <label>Select a Color</label>
                <br/>
                <fieldset role="group">
                    <input type="color" @oninput="ReceiveColorInput"/>
                    <button @onclick="AddColor" disabled="@(_selectedColor is null)" type="button" class="contrast">Add</button>
                </fieldset>
            </div>
        </div>
        @if (_request.Colors is not null && _request.Colors.Count > 0)
        {
            <div class="row">
                @foreach (Color color in _request.Colors)
                {
                    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                        <!--
                    <p>@color.Hexadecimal</p>
                    <div style="width: 75px; height: 75px; background-color: @(color.Hexadecimal)"></div>
                    <button @onclick="() => RemoveColor(color)" type="button">Remove</button>
                    -->
                        <ColorWidget SelectedColor="@color" OnRemove="() => RemoveColor(color)" Width="75" Height="75"/>
                    </div>
                }
            </div>
        }
        <br />
        <div class="row">
            <div class="col-xs-3">
                <button type="submit">Search</button>
            </div>
            <div class="col-xs-3">
                <button type="button" @onclick="Reset" class="outline secondary">Reset</button>
            </div>
        </div>
    </EditForm>
</details>

<br />
<hr />
<br />

@if (_isLoading)
{
    <p>Loading...</p>
    <br />
}
else if (_errorMessage != null)
{
    <p>@_errorMessage</p>
    <br />
}
else if (_response != null)
{
    <p>Number of Results: @_response.TotalCount</p>
    <hr />
    <table class="striped">
        <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Name</th>
            <th scope="col">Created Date</th>
            <th scope="col">Modified Date</th>
            <th scope="col">Edit</th>
            <th scope="col">Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Palette palette in _response.Palettes)
        {
            <tr>
                <td>@palette.PaletteId</td>
                <td>@palette.Name</td>
                <td>@palette.CreatedDate</td>
                <td>@palette.ModifiedDate</td>
                <td><button @onclick="() => GoToPalettePage(palette.PaletteId)">Edit</button></td>
                <td><button @onclick="() => _paletteToDelete = palette">Delete</button></td>
            </tr>
        }
        </tbody>
    </table>
    <div class="row between-xs">
        <div class="col">
            <button disabled="@(!_response.HasPreviousPage)" @onclick="GoToPreviousPage">Previous Page</button>
        </div>
        <div class="col">
            <button disabled="@(!_response.HasNextPage)" @onclick="GoToNextPage">Next Page</button>
        </div>
    </div>
}
else
{
    <p>No palettes found.</p>
}

<br />

@if (_paletteToDelete is not null)
{
    <dialog open>
        <article>
            <header data-theme="light">
                <p><strong>Are you sure you want to delete?</strong></p>
            </header>
            <ul>
                <li>Name: @(_paletteToDelete.Name)</li>
                <li>Number of Colors: @(_paletteToDelete.Colors.Count)</li>
                <li>Created Date: @(_paletteToDelete.CreatedDate)</li>
            </ul>
            @if (_dialogErrorMessage is not null)
            {
                <p class="pico-background-red-500">@_dialogErrorMessage</p>
            }
            <footer>
                <button class="secondary" @onclick="CloseDeleteDialog">Cancel</button>
                <button @onclick="DeletePalette" class="pico-background-red-250">Delete</button>
            </footer>
        </article>
    </dialog>
}

@code {
    [Inject] private IPaletteService PaletteService { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private GetPalettesRequest _request = new();
    private GetPalettesResponse? _response;

    private Color? _selectedColor = null;

    private string? _errorMessage;
    private bool _isLoading;
    
    private Palette? _paletteToDelete;
    private string? _dialogErrorMessage;

    protected override async Task OnParametersSetAsync()
    {
        await GetPalettes();
    
        await base.OnParametersSetAsync();
    }

    private async Task GoToNextPage()
    {
        _request.Page++;
        await GetPalettes();
    }

    private async Task GoToPreviousPage()
    {
        _request.Page--;
        await GetPalettes();
    }

    private void GoToPalettePage(int paletteId)
    {
        Navigation.NavigateTo($"palettes/{paletteId}");
    }

    private async Task GetPalettes()
    {
        _isLoading = true;
        _errorMessage = null;
        
        try
        {
            Result<GetPalettesResponse, HandledException> result = await PaletteService.GetPalettesAsync(_request);

            result.Match(
                success: response =>
                {
                    _response = response;
                    return true;
                },
                failure: error =>
                {
                    _errorMessage = error.Message;
                    return false;
                }
            );
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }

        _isLoading = false;
    }

    private async Task Reset()
    {
        _isLoading = false;
        _errorMessage = null;
        _response = null;
        _request = new();
        _paletteToDelete = null;
        _dialogErrorMessage = null;

        await SearchPalettes();
    }

    private void ReceiveColorInput(ChangeEventArgs obj)
    {
        if (obj.Value is null) return;
        
        _selectedColor = new Color(obj.Value.ToString()!);
    }

    private void AddColor()
    {
        if (_selectedColor is null) return;
        
        if (_request.Colors is null)
        {
            _request.Colors = new();
        }
        
        _request.Colors.Add(_selectedColor);
        _selectedColor = null;
    }

    private void RemoveColor(Color color)
    {
        if (_request.Colors is null) return;
        
        if (_request.Colors.Contains(color))
        {
            _request.Colors.Remove(color);
        }
    }
    
    private void GoToPaletteCreate()
    {
        Navigation.NavigateTo("/palettes/create");
    }

    private void CloseDeleteDialog()
    {
        _paletteToDelete = null;
        _dialogErrorMessage = null;
    }

    private async Task DeletePalette()
    {
        if (_paletteToDelete is null) return;
        
        Result<bool, HandledException> result = await PaletteService.DeletePaletteAsync(_paletteToDelete.PaletteId);

        bool isSuccessful = result.Match<bool>(
            success:  _ => 
            {
                // Set to null to close the dialog
                _paletteToDelete = null;
                return true;
            },
            failure: error =>
            {
                _dialogErrorMessage = error.Message;
                return false;
            }
            );
        
        // Reload the palettes if successful
        if (isSuccessful) await GetPalettes();
    }

    private async Task SearchPalettes()
    {
        _request.Page = 1;
        await GetPalettes();
    }

}